make -C ./src/backend generated-headers
make[1]: Entering directory '/home/david/postgresql/src/backend'
make -C catalog distprep generated-header-symlinks
make[2]: Entering directory '/home/david/postgresql/src/backend/catalog'
make[2]: Nothing to be done for 'distprep'.
make[2]: Nothing to be done for 'generated-header-symlinks'.
make[2]: Leaving directory '/home/david/postgresql/src/backend/catalog'
make -C nodes distprep generated-header-symlinks
make[2]: Entering directory '/home/david/postgresql/src/backend/nodes'
make[2]: Nothing to be done for 'distprep'.
make[2]: Nothing to be done for 'generated-header-symlinks'.
make[2]: Leaving directory '/home/david/postgresql/src/backend/nodes'
make -C utils distprep generated-header-symlinks
make[2]: Entering directory '/home/david/postgresql/src/backend/utils'
make[2]: Nothing to be done for 'distprep'.
make[2]: Nothing to be done for 'generated-header-symlinks'.
make[2]: Leaving directory '/home/david/postgresql/src/backend/utils'
make[1]: Leaving directory '/home/david/postgresql/src/backend'
rm -rf '/home/david/postgresql'/tmp_install
/usr/bin/mkdir -p '/home/david/postgresql'/tmp_install/log
make -C '.' DESTDIR='/home/david/postgresql'/tmp_install install >'/home/david/postgresql'/tmp_install/log/install.log 2>&1
make -j1 -C src/test/regress checkprep >>'/home/david/postgresql'/tmp_install/log/install.log 2>&1
make -C src/test/regress check
make[1]: Entering directory '/home/david/postgresql/src/test/regress'
make -C ../../../src/port all
make[2]: Entering directory '/home/david/postgresql/src/port'
make[2]: Nothing to be done for 'all'.
make[2]: Leaving directory '/home/david/postgresql/src/port'
make -C ../../../src/common all
make[2]: Entering directory '/home/david/postgresql/src/common'
make[2]: Nothing to be done for 'all'.
make[2]: Leaving directory '/home/david/postgresql/src/common'
make -C ../../../contrib/spi
make[2]: Entering directory '/home/david/postgresql/contrib/spi'
make[2]: Nothing to be done for 'all'.
make[2]: Leaving directory '/home/david/postgresql/contrib/spi'
echo "# +++ regress check in src/test/regress +++" && PATH="/home/david/postgresql/tmp_install/usr/local/pgsql/bin:/home/david/postgresql/src/test/regress:$PATH" LD_LIBRARY_PATH="/home/david/postgresql/tmp_install/usr/local/pgsql/lib"  ../../../src/test/regress/pg_regress --temp-instance=./tmp_check --inputdir=. --bindir=     --dlpath=. --max-concurrent-tests=20  --schedule=./parallel_schedule  
# +++ regress check in src/test/regress +++
# using temp instance on port 61696 with PID 2141
ok 1         - test_setup                                136 ms
# parallel group (20 tests):  regproc money text char varchar name int2 int4 oid float4 int8 txid pg_lsn uuid boolean bit float8 enum numeric rangetypes
ok 2         + boolean                                    64 ms
ok 3         + char                                       48 ms
ok 4         + name                                       51 ms
ok 5         + varchar                                    50 ms
ok 6         + text                                       41 ms
ok 7         + int2                                       53 ms
ok 8         + int4                                       55 ms
ok 9         + int8                                       60 ms
ok 10        + oid                                        58 ms
ok 11        + float4                                     58 ms
ok 12        + float8                                     72 ms
ok 13        + bit                                        71 ms
ok 14        + numeric                                   195 ms
ok 15        + txid                                       61 ms
ok 16        + uuid                                       63 ms
ok 17        + enum                                       76 ms
ok 18        + money                                      29 ms
ok 19        + rangetypes                                206 ms
ok 20        + pg_lsn                                     61 ms
ok 21        + regproc                                    28 ms
# parallel group (20 tests):  lseg macaddr8 time md5 line macaddr timetz point path circle numerology date inet interval strings box polygon multirangetypes timestamp timestamptz
ok 22        + strings                                   101 ms
ok 23        + md5                                        46 ms
ok 24        + numerology                                 63 ms
ok 25        + point                                      54 ms
ok 26        + lseg                                       24 ms
ok 27        + line                                       46 ms
ok 28        + box                                       137 ms
ok 29        + path                                       55 ms
ok 30        + polygon                                   143 ms
ok 31        + circle                                     56 ms
ok 32        + date                                       69 ms
ok 33        + time                                       41 ms
ok 34        + timetz                                     51 ms
ok 35        + timestamp                                 423 ms
ok 36        + timestamptz                               485 ms
ok 37        + interval                                   75 ms
ok 38        + inet                                       70 ms
ok 39        + macaddr                                    46 ms
ok 40        + macaddr8                                   32 ms
ok 41        + multirangetypes                           157 ms
# parallel group (12 tests):  unicode comments tstypes xid expressions misc_sanity mvcc horology geometry type_sanity opr_sanity regex
ok 42        + geometry                                   83 ms
ok 43        + horology                                   75 ms
ok 44        + tstypes                                    54 ms
ok 45        + regex                                     236 ms
ok 46        + type_sanity                               102 ms
ok 47        + opr_sanity                                190 ms
ok 48        + misc_sanity                                67 ms
ok 49        + comments                                   42 ms
ok 50        + expressions                                64 ms
ok 51        + unicode                                    37 ms
ok 52        + xid                                        60 ms
ok 53        + mvcc                                       67 ms
# parallel group (5 tests):  copyselect copydml copy insert_conflict insert
ok 54        + copy                                       39 ms
ok 55        + copyselect                                 16 ms
ok 56        + copydml                                    17 ms
ok 57        + insert                                    127 ms
ok 58        + insert_conflict                            58 ms
# parallel group (7 tests):  create_operator create_function_c create_type create_schema create_misc create_procedure create_table
ok 59        + create_function_c                          18 ms
ok 60        + create_misc                                32 ms
ok 61        + create_operator                            16 ms
ok 62        + create_procedure                           33 ms
ok 63        + create_table                              150 ms
ok 64        + create_type                                28 ms
ok 65        + create_schema                              30 ms
# parallel group (5 tests):  index_including create_view index_including_gist create_index_spgist create_index
ok 66        + create_index                              301 ms
ok 67        + create_index_spgist                       232 ms
ok 68        + create_view                               140 ms
ok 69        + index_including                            78 ms
ok 70        + index_including_gist                      151 ms
# parallel group (16 tests):  select create_cast hash_func create_aggregate roleattributes errors drop_if_exists create_function_sql create_am typed_table constraints infinite_recurse vacuum updatable_views inherit triggers
ok 71        + create_aggregate                           58 ms
ok 72        + create_function_sql                        89 ms
ok 73        + create_cast                                47 ms
ok 74        + constraints                               129 ms
ok 75        + triggers                                  395 ms
ok 76        + select                                     43 ms
ok 77        + inherit                                   278 ms
ok 78        + typed_table                               101 ms
ok 79        + vacuum                                    222 ms
ok 80        + drop_if_exists                             70 ms
ok 81        + updatable_views                           276 ms
ok 82        + roleattributes                             59 ms
ok 83        + create_am                                  93 ms
ok 84        + hash_func                                  46 ms
ok 85        + errors                                     61 ms
ok 86        + infinite_recurse                          182 ms
ok 87        - sanity_check                               45 ms
# parallel group (20 tests):  select_having select_distinct_on random delete namespace case select_implicit select_into prepared_xacts portals transactions select_distinct union subselect arrays update join hash_index aggregates btree_index
ok 88        + select_into                               120 ms
ok 89        + select_distinct                           162 ms
ok 90        + select_distinct_on                         51 ms
ok 91        + select_implicit                            88 ms
ok 92        + select_having                              29 ms
ok 93        + subselect                                 208 ms
ok 94        + union                                     170 ms
ok 95        + case                                       83 ms
ok 96        + join                                      363 ms
ok 97        + aggregates                                424 ms
ok 98        + transactions                              144 ms
ok 99        + random                                     51 ms
ok 100       + portals                                   143 ms
ok 101       + arrays                                    245 ms
ok 102       + btree_index                               804 ms
ok 103       + hash_index                                381 ms
ok 104       + update                                    263 ms
ok 105       + delete                                     53 ms
ok 106       + namespace                                  56 ms
ok 107       + prepared_xacts                            120 ms
# parallel group (20 tests):  security_label init_privs drop_operator tablesample lock object_address collate password replica_identity identity groupingsets matview generated rowsecurity spgist gin gist join_hash brin privileges
ok 108       + brin                                     1049 ms
ok 109       + gin                                       570 ms
ok 110       + gist                                      617 ms
ok 111       + spgist                                    482 ms
ok 112       + privileges                               1294 ms
ok 113       + init_privs                                 39 ms
ok 114       + security_label                             25 ms
ok 115       + collate                                   195 ms
ok 116       + matview                                   349 ms
ok 117       + lock                                       92 ms
ok 118       + replica_identity                          247 ms
ok 119       + rowsecurity                               432 ms
ok 120       + object_address                            156 ms
ok 121       + tablesample                                79 ms
ok 122       + groupingsets                              295 ms
ok 123       + drop_operator                              47 ms
ok 124       + password                                  214 ms
ok 125       + identity                                  275 ms
ok 126       + generated                                 361 ms
ok 127       + join_hash                                1046 ms
# parallel group (2 tests):  brin_bloom brin_multi
ok 128       + brin_bloom                                138 ms
ok 129       + brin_multi                                186 ms
# parallel group (16 tests):  async dbsize alter_operator sysviews tsrf tidscan tid tidrangescan create_role misc_functions alter_generic misc incremental_sort merge create_table_like collate.icu.utf8
ok 130       + create_table_like                         149 ms
ok 131       + alter_generic                              83 ms
ok 132       + alter_operator                             34 ms
ok 133       + misc                                       98 ms
ok 134       + async                                      20 ms
ok 135       + dbsize                                     23 ms
ok 136       + merge                                     139 ms
ok 137       + misc_functions                             78 ms
ok 138       + sysviews                                   53 ms
ok 139       + tsrf                                       54 ms
ok 140       + tid                                        58 ms
ok 141       + tidscan                                    57 ms
ok 142       + tidrangescan                               65 ms
ok 143       + collate.icu.utf8                          159 ms
ok 144       + incremental_sort                          117 ms
ok 145       + create_role                                72 ms
# parallel group (7 tests):  collate.linux.utf8 collate.windows.win1252 psql_crosstab amutils rules psql stats_ext
ok 146       + rules                                     143 ms
ok 147       + psql                                      159 ms
ok 148       + psql_crosstab                              19 ms
ok 149       + amutils                                    21 ms
ok 150       + stats_ext                                 775 ms
ok 151       + collate.linux.utf8                         18 ms
ok 152       + collate.windows.win1252                    17 ms
ok 153       - select_parallel                           841 ms
ok 154       - write_parallel                            108 ms
ok 155       - vacuum_parallel                            66 ms
# parallel group (2 tests):  subscription publication
ok 156       + publication                               147 ms
ok 157       + subscription                               31 ms
# parallel group (17 tests):  combocid xmlmap portals_p2 guc functional_deps advisory_lock tsdicts equivclass dependency select_views window bitmapops cluster tsearch indirect_toast foreign_data foreign_key
ok 158       + select_views                              116 ms
ok 159       + portals_p2                                 63 ms
ok 160       + foreign_key                               500 ms
ok 161       + cluster                                   251 ms
ok 162       + dependency                                115 ms
ok 163       + guc                                        67 ms
ok 164       + bitmapops                                 250 ms
ok 165       + combocid                                   43 ms
ok 166       + tsearch                                   252 ms
ok 167       + tsdicts                                    94 ms
ok 168       + foreign_data                              336 ms
ok 169       + window                                    198 ms
ok 170       + xmlmap                                     54 ms
ok 171       + functional_deps                            78 ms
ok 172       + advisory_lock                              78 ms
ok 173       + indirect_toast                            272 ms
ok 174       + equivclass                                103 ms
# parallel group (7 tests):  json_encoding jsonpath_encoding jsonpath sqljson jsonb_jsonpath json jsonb
ok 175       + json                                       52 ms
ok 176       + jsonb                                     116 ms
ok 177       + json_encoding                              13 ms
ok 178       + jsonpath                                   27 ms
ok 179       + jsonpath_encoding                          18 ms
ok 180       + jsonb_jsonpath                             45 ms
ok 181       + sqljson                                    34 ms
# parallel group (18 tests):  prepare limit returning plancache xml conversion with polymorphism copy2 temp sequence rangefuncs rowtypes largeobject truncate domain plpgsql alter_table
ok 182       + plancache                                 106 ms
ok 183       + limit                                     100 ms
ok 184       + plpgsql                                   341 ms
ok 185       + copy2                                     186 ms
ok 186       + temp                                      187 ms
ok 187       + domain                                    213 ms
ok 188       + rangefuncs                                190 ms
ok 189       + prepare                                    93 ms
ok 190       + conversion                                115 ms
ok 191       + truncate                                  212 ms
ok 192       + alter_table                               624 ms
ok 193       + sequence                                  188 ms
ok 194       + polymorphism                              177 ms
ok 195       + rowtypes                                  195 ms
ok 196       + returning                                 105 ms
ok 197       + largeobject                               203 ms
ok 198       + with                                      162 ms
ok 199       + xml                                       113 ms
# parallel group (12 tests):  reloptions hash_part partition_info explain memoize compression indexing partition_join partition_aggregate stats partition_prune tuplesort
ok 200       + partition_join                            434 ms
ok 201       + partition_prune                           611 ms
ok 202       + reloptions                                 38 ms
ok 203       + hash_part                                  59 ms
ok 204       + indexing                                  367 ms
ok 205       + partition_aggregate                       528 ms
ok 206       + partition_info                             70 ms
ok 207       + tuplesort                                 710 ms
ok 208       + explain                                    73 ms
ok 209       + compression                               126 ms
ok 210       + memoize                                   106 ms
ok 211       + stats                                     541 ms
# parallel group (2 tests):  event_trigger oidjoins
ok 212       + event_trigger                              52 ms
ok 213       + oidjoins                                  106 ms
ok 214       - fast_default                               60 ms
ok 215       - tablespace                                137 ms
1..215
# All 215 tests passed.
make[1]: Leaving directory '/home/david/postgresql/src/test/regress'
